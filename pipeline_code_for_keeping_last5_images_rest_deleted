pipeline {
    agent any

    environment {
        IMAGE_NAME = 'test'
        IMAGE_TAG = "${env.BUILD_NUMBER}" // Set image tag as build number
    }

    stages {
        stage('Clone Repository') {
            steps {
                script {
                 git branch: 'main', credentialsId: 'gitpath', url: 'https://github.com/kanchana08/test.git'
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Build the Docker image
                    echo "Building Docker image: ${IMAGE_NAME}:${IMAGE_TAG}"
                    sh "docker build -t ${IMAGE_NAME}:${IMAGE_TAG} ."
                }
            }
        }

        stage('Clean Docker Images') {
            steps {
                script {
                    // Get all the image IDs for the specified image
                    def images = sh(script: "docker images --filter 'reference=${IMAGE_NAME}:*' --format '{{.Repository}}:{{.Tag}}' | sort -t':' -k2 -n", returnStdout: true).trim().split("\n")

                    // Count the total number of images
                    def totalImages = images.size()

                    // Keep only the latest 5 images, delete the rest
                    if (totalImages > 5) {
                        def deleteCount = totalImages - 5
                        echo "Total images: ${totalImages}. Deleting ${deleteCount} old images..."
                        
                        // Loop through and remove the old images
                        for (int i = 0; i < deleteCount; i++) {
                            def imageToDelete = images[i]
                            echo "Deleting image: ${imageToDelete}"
                            sh "docker rmi '${imageToDelete}'"
                        }
                    } else {
                        echo "No images to delete. Only ${totalImages} images present."
                    }
                }
            }
        }
    }
}
