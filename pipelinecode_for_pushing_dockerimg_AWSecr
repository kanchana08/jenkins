pipeline {
    agent any 
environment {
     AWS_ACCESS_KEY_ID="${env.AWS_ACCESS_KEY_ID}"
        AWS_SECRET_ACCESS_KEY="${env.AWS_SECRET_ACCESS_KEY}"
        AWS_REGION=('us-east-1')
}
stages {
    stage('Cloning Git') {
 steps {
     git credentialsId: 'PAT', url: 'https://github.com/kanchana08/Dockerfile_python.git'
               
 }
 }
    stage('Build Docker Image') { 
        steps { 
      
            sh "docker build -t lamda_ply:latest ."
        }
        }
        stage('Publish to ECR') { 
            steps {
                script {
                        sh "aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 165271113309.dkr.ecr.us-east-1.amazonaws.com" 
                        sh "docker tag lamda_ply:latest 165271113309.dkr.ecr.us-east-1.amazonaws.com/lamda_ply:latest" 
                        sh "docker push 165271113309.dkr.ecr.us-east-1.amazonaws.com/lamda_ply:latest"
                        } 
                    
                } 
                
            }
            } 
    
}
========================================================================================================
pipeline { --------------------------------------------------------------( i put build stage in stage('Publish to ECR') )
    agent any 
environment {
     AWS_ACCESS_KEY_ID="${env.AWS_ACCESS_KEY_ID}"
        AWS_SECRET_ACCESS_KEY="${env.AWS_SECRET_ACCESS_KEY}"
        AWS_REGION=('us-east-1')
}
stages {
    stage('Cloning Git') {
 steps {
     git credentialsId: 'PAT', url: 'https://github.com/kanchana08/Dockerfile_python.git'
               
 }
 }
   
        stage('Publish to ECR') { 
            steps {
                script {
                        sh "aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 165271113309.dkr.ecr.us-east-1.amazonaws.com" 
                        sh"docker build -t lamda_ply ."
                        sh "docker tag lamda_ply:latest 165271113309.dkr.ecr.us-east-1.amazonaws.com/lamda_ply:latest" 
                        sh "docker push 165271113309.dkr.ecr.us-east-1.amazonaws.com/lamda_ply:latest"
                        
                    
                } 
                    
                } 
                
            }
            } 
    
}
    










    
================================================================================================

pipeline{  ---------------------------------------------------------------------------for s3
    agent any 
    environment {
        AWS_ACCESS_KEY_ID="${env.AWS_ACCESS_KEY_ID}"
        AWS_SECRET_ACCESS_KEY="${env.AWS_SECRET_ACCESS_KEY}"
        AWS_REGION=('us-east-1')
    }
    stages{
        stage('exm stage'){
            steps {
                script{
                    //sh"aws s3 ls s3://arb111"
                    sh"aws s3 ls"
                }
            }
        }
    }
    
}
=======================================================================================================================
delete latest image update newly created image


pipeline {
    agent any 
environment {
     AWS_ACCESS_KEY_ID="${env.AWS_ACCESS_KEY_ID}"
        AWS_SECRET_ACCESS_KEY="${env.AWS_SECRET_ACCESS_KEY}"
       // AWS_REGION=('us-east-1')
        AWS_REGION="${env.AWS_DEFAULT_REGION}"
}
stages {
    stage('Cloning Git') {
 steps {
     git credentialsId: 'PAT', url: 'https://github.com/kanchana08/Dockerfile_python.git'
               
 }
 }
    stage('Build Docker Image') { 
        steps { 
      //   script {
  // dockerImage = docker.build "lamda_ply:latest"
                
         //   } 
            sh "docker build -t lamda_ply:latest ."
        }
        }
        stage('Publish to ECR') { 
            steps {
                script {
                        sh "aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 165271113309.dkr.ecr.us-east-1.amazonaws.com"
                        sh" aws ecr batch-delete-image --repository-name lamda_ply --image-ids imageTag=latest"
                        //sh" aws ecr batch-delete-image --repository-name lamda_ply --image-ids imageTag=latest"
                         sh"docker tag lamda_ply:latest 165271113309.dkr.ecr.us-east-1.amazonaws.com/lamda_ply:latest" 
                        sh "docker push 165271113309.dkr.ecr.us-east-1.amazonaws.com/lamda_ply:latest"
                        } 
                    
                } 
                
            }
            } 
    
}
    
==========================================================================================================================

update the ecr image to lambda funtions 

[]  select create lambda and  select container image and past ecr uri  

[]   sh "aws lambda update-function-code --region ${AWS_DEFAULT_REGION} --function-name ${LAMBDA_FUNCTION_NAME} --image-uri ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_REPO_NAME}:${IMAGE_TAG}" 

 

 

[] We need to install plugins  

    AWS lambda plugin 

Amazon EC2 

CloudBees AWS Credentials Plugin 








pipeline { 
    agent any
    environment {
        AWS_ACCESS_KEY_ID="${env.AWS_ACCESS_KEY_ID}" 
        AWS_SECRET_ACCESS_KEY="${env.AWS_SECRET_ACCESS_KEY}" 
        AWS_REGION=('us-east-1')
        
    }
    stages {
        stage('Cloning Git') {
            steps {
                git credentialsId: 'PATH', url: 'https://github.com/kanchana08/Dockerfile_python.git'
                
            } 
            
        }
        stage('Build Docker Image') {
            steps {
                sh "docker build -t playwright_123:latest ." 
                
            } 
            
        }
        stage('Publish to ECR') {
            steps {
                script { 

                        sh "aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 909100690382.dkr.ecr.us-east-1.amazonaws.com"
                        //sh" aws ecr batch-delete-image --repository-name playwright_123 --image-ids imageTag=latest"
                        
                        sh" aws ecr batch-delete-image --repository-name playwright_123 --image-ids imageTag=latest" 
                        sh "docker tag playwright_123:latest 909100690382.dkr.ecr.us-east-1.amazonaws.com/playwright_123:latest"
                        sh "docker push 909100690382.dkr.ecr.us-east-1.amazonaws.com/playwright_123:latest" 

                        }  

                    } 
            
        } 
        
stage('lambda_function'){
    steps{
        script{
 sh'aws lambda update-function-code --region us-east-1 --function-name lambdafunction --image-uri 909100690382.dkr.ecr.us-east-1.amazonaws.com/playwright_123:latest'

        }
    }
}
}
    
}

=======================================================================================================
with output stage 
pipeline { 
    agent any
    environment {
        AWS_ACCESS_KEY_ID="${env.AWS_ACCESS_KEY_ID}" 
        AWS_SECRET_ACCESS_KEY="${env.AWS_SECRET_ACCESS_KEY}" 
        AWS_REGION=('us-east-1')
        
    }
    stages {
        stage('Cloning Git') {
            steps {
                git credentialsId: 'PATH', url: 'https://github.com/kanchana08/Dockerfile_python.git'
                
            } 
            
        }
        stage('Build Docker Image') {
            steps {
                sh "docker build -t playwright_123:latest ." 
                
            } 
            
        }
        stage('Publish to ECR') {
            steps {
                script { 

                        sh "aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 909100690382.dkr.ecr.us-east-1.amazonaws.com"
                        //sh" aws ecr batch-delete-image --repository-name playwright_123 --image-ids imageTag=latest"
                        
                        sh" aws ecr batch-delete-image --repository-name playwright_123 --image-ids imageTag=latest" 
                        sh "docker tag playwright_123:latest 909100690382.dkr.ecr.us-east-1.amazonaws.com/playwright_123:latest"
                        sh "docker push 909100690382.dkr.ecr.us-east-1.amazonaws.com/playwright_123:latest" 

                        }  

                    } 
            
        } 
        
stage('lambda_function'){
    steps{
        script{
 sh'aws lambda update-function-code --region us-east-1 --function-name lambdafunction --image-uri 909100690382.dkr.ecr.us-east-1.amazonaws.com/playwright_123:latest'

        }
    }
}
        
        
        
stage('lambda_test_function'){
    steps{
        sh' aws lambda invoke --function-name lambdafunction out --log-type Tail'

    }
}
        
        
        
        
    }
    
}

============================================================================================================================

code for pushing image to ECR and lambda,lambda test and it create cloudlogs also 


pipeline { 
    agent any
    environment {
        AWS_ACCESS_KEY_ID="${env.AWS_ACCESS_KEY_ID}" 
        AWS_SECRET_ACCESS_KEY="${env.AWS_SECRET_ACCESS_KEY}" 
        AWS_REGION=('us-east-1')
        
    }
    stages {
        stage('Cloning Git') {
            steps {
                git credentialsId: 'PATH', url: 'https://github.com/kanchana08/Dockerfile_python.git'
                
            } 
            
        }
        stage('Build Docker Image') {
            steps {
                sh "docker build -t playwright_123:latest ." 
                
            } 
            
        }
        stage('Publish to ECR') {
            steps {
                script { 

                        sh "aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 909100690382.dkr.ecr.us-east-1.amazonaws.com"
                        //sh" aws ecr batch-delete-image --repository-name playwright_123 --image-ids imageTag=latest"
                        
                        sh" aws ecr batch-delete-image --repository-name playwright_123 --image-ids imageTag=latest" 
                        sh "docker tag playwright_123:latest 909100690382.dkr.ecr.us-east-1.amazonaws.com/playwright_123:latest"
                        sh "docker push 909100690382.dkr.ecr.us-east-1.amazonaws.com/playwright_123:latest" 

                        }  

                    } 
            
        } 
        
stage('lambda_function'){
    steps{
        script{
 sh'aws lambda update-function-code --region us-east-1 --function-name lambdafunction --image-uri 909100690382.dkr.ecr.us-east-1.amazonaws.com/playwright_123:latest'

        }
    }
}
        
        
        
stage('lambda_test_function'){
    steps{
        sh' aws lambda invoke --function-name lambdafunction out --log-type Tail'

    }
}
        
        
        
        
    }
    
}







